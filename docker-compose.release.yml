version: "3.3"

services:
  # Mosquitto
  mosquitto:
    image: eclipse-mosquitto
    container_name: mosquitto
    restart: unless-stopped
    ports:
      - "1883:1883"
    volumes:
      - ./volumes/mosquitto:/etc/mosquitto
      - ./config/mosquitto/passwd:/etc/mosquitto/passwd
      - ./config/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
    networks:
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mosquitto.rule=Host(`mosquitto.${DOMAIN}`)"
      - "traefik.http.routers.mosquitto.entrypoints=mosquitto"

  # Database
  database:
    image: timescale/timescaledb:latest-pg15
    container_name: database
    restart: unless-stopped
    env_file: docker-compose.env
    volumes:
      - ./volumes/database:/var/lib/postgresql/data
    networks:
      - internal

  # Client
  client:
    build:
      context: client
      dockerfile: Dockerfile
    container_name: client
    restart: unless-stopped
    env_file: docker-compose.env
    args:
      SERVER: https://server.${DOMAIN}/
    depends_on:
      - server
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client.rule=Host(`client.${DOMAIN}`)"
      - "traefik.http.routers.client.entrypoints=web, websecure"
      - "traefik.http.routers.client.tls.certresolver=resolver"
      - "traefik.http.routers.client.tls=true"
      - 'traefik.http.routers.client.middlewares=authelia@docker'
    networks:
      - internal

  # Server
  server:
    build:
      context: server
      dockerfile: Dockerfile
    container_name: server
    restart: unless-stopped
    env_file: docker-compose.env
    depends_on:
      - mosquitto
      - database
    networks:
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.server.rule=Host(`server.${DOMAIN}`)"
      - "traefik.http.routers.server.entrypoints=web, websecure"
      - "traefik.http.routers.server.tls.certresolver=resolver"
      - "traefik.http.routers.server.tls=true"
      - 'traefik.http.routers.server.middlewares=authelia@docker'

  # Traefik
  traefik:
    image: traefik:v3.3.2
    container_name: traefik
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    volumes:
      - /run/docker.sock:/run/docker.sock:ro
      - ./volumes/traefik/config/:/etc/traefik/:ro
      - ./volumes/traefik/certs/:/var/traefik/certs/:rw
    networks:
      - internal

  # Authelia
  authelia:
    image: authelia/authelia
    container_name: authelia
    restart: unless-stopped
    env_file: docker-compose.env
    environment:
      - DOMAIN=${DOMAIN}
    volumes:
      - ./config:/config
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.authelia.rule=Host(`auth.${DOMAIN}`)'
      - 'traefik.http.routers.authelia.entrypoints=web, websecure'
      - 'traefik.http.routers.authelia.tls=true'
      - 'traefik.http.routers.authelia.tls.certresolver=resolver'
      - 'traefik.http.middlewares.authelia.forwardauth.address=http://authelia:9091/api/verify?rd=https://auth.${DOMAIN}'
      - 'traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true'
      - 'traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Name,Remote-Email'
    depends_on:
      - database
    networks:
      - internal
networks:
  internal:
